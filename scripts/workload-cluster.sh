#!/bin/bash

set -euo pipefail

# finalize workload cluster(s) bootstrap or create a new workload cluster.
# run `./<repo_root>/scripts/workload-cluster.sh -h` to learn more.

REPO_ROOT=$(git rev-parse --show-toplevel)
tempdir=$(mktemp -d)

# Management cluster kube config and context
KUBECONFIG=${KUBECONFIG:-$HOME/.kube/config}
CONTEXT_MGMT="cluster-mgmt-admin@cluster-mgmt"

# cluster config file containing all settings required for
# spinning up a new cluster
CONFIG_FILE=""

# kubectl configured to talk to management cluster, based on use input
KUBECTL_MGMT=""

CLUSTER_NAME_ARG=""

GENERATE_ONLY=""

main() {

set +x
. $REPO_ROOT/config/shared.env
set -x

while [[ $# -gt 0 ]]; do
  case $1 in
    -m|--management-cluster-context)
      MGMT_CTX=$2; shift
      ;;
    -k|--management-cluster-kubeconfig)
      MGMT_CFG=$2; shift
      ;;
    -n|--cluster-name)
      CLUSTER_NAME_ARG=$2; shift
      ;;
    -g|--generate-only)
      CLUSTER_NAME_ARG=$2; shift
      GENERATE_ONLY=true
      ;;
    -h|--help)
      show_help
      ;;
    *)
      show_help
      ;;
  esac
  shift
done

CONTEXT_MGMT=${MGMT_CTX:-$CONTEXT_MGMT}
KUBECONFIG=${MGMT_CFG:-$HOME/.kube/config}
KUBECTL_MGMT="kubectl --kubeconfig $KUBECONFIG --context $CONTEXT_MGMT"
echo Management cluster kubectl config: $KUBECTL_MGMT

if [ -z "$CLUSTER_NAME_ARG" ]; then
  echo Finalize existing workload clusters
  finalize
else
  echo Create cluster
  CONFIG_FILE=$REPO_ROOT/config/$CLUSTER_NAME_ARG.env
  if [ ! -f "$CONFIG_FILE" ]; then
    echo Cluster must have config file $CONFIG_FILE && exit 1
  fi
  set +x
  . $CONFIG_FILE
  set -x
  if [ $GENERATE_ONLY ]; then
    generate_and_push_manifests
  else
    generate_and_push_manifests
    finalize_cluster $CLUSTER_NAME
  fi
fi

}

generate_and_push_manifests() {
  echo Unsupported && exit 1
  # config file must be created manually before using this script
  # these settings should not be autogenerated, it's up to the user to configure
  infra_dir=$REPO_ROOT/infrastructure/control-plane-cluster/$CLUSTER_NAME
  # if directory already exists, then this can be used as a way to upgrade contents
  mkdir -p $infra_dir

  envsubst < $REPO_ROOT/templates/capi-workload-kustomization.yaml > $infra_dir/kustomization.yaml
  envsubst < $REPO_ROOT/templates/capi-workload-namespace.yaml > $infra_dir/namespace.yaml
  envsubst < $REPO_ROOT/templates/aws/cluster.yaml > $infra_dir/cluster.yaml

  # I don't want to give flux deploy key with write permissions, therefore 'bootstrap' is not an option
  # 'flux install --export' does not have options to generate gotk-sync.yaml, so instead this will be
  # instantiated from template
  # This is only needed when adding a cluster for the first time to the repo. On the following invocations, flux is deployed by flux instance on a management cluster
  cluster_dir=$REPO_ROOT/clusters/${CLUSTER_NAME}/flux-system
  mkdir -p $cluster_dir
  flux install --version=$FLUXCD_VERSION --export > $cluster_dir/gotk-components.yaml
  envsubst < $REPO_ROOT/templates/gotk-sync.yaml > $cluster_dir/gotk-sync.yaml
  generate_kustomizations $cluster_dir/kustomization.yaml clusters/$CLUSTER_NAME/kustomization.yaml

  if [ -z "$(grep $CLUSTER_NAME $REPO_ROOT/infrastructure/control-plane-cluster/kustomization.yaml)" ]; then
    yq eval ". *+ {\"resources\":[\"$CLUSTER_NAME\"]}" $REPO_ROOT/infrastructure/control-plane-cluster/kustomization.yaml --inplace
  fi

  #if false; then
  if :; then
    git add $infra_dir
    git add $cluster_dir
    git add $REPO_ROOT/infrastructure/control-plane-cluster/kustomization.yaml
    git commit -m "feat: add or update generated files for $CLUSTER_NAME"
    git push origin $GITHUB_BRANCH
  fi
}

finalize_cluster() {
  local cluster=$1
  echo Finalizing cluster $cluster in $cluster namespace

  echo $(date '+%F %H:%M:%S') - Waiting for $cluster kubeconfig to become available
  while ! clusterctl --kubeconfig=$KUBECONFIG --kubeconfig-context $CONTEXT_MGMT get kubeconfig $cluster -n $cluster > $tempdir/$cluster-config ; do
    echo $(date '+%F %H:%M:%S') re-try in 25s... && sleep 25
  done

  # get workload cluster kubeconfig and merge it to the main one
  cp $HOME/.kube/config $HOME/.kube/config-$(date +%F_%H_%M_%S)
  KUBECONFIG=$HOME/.kube/config:$tempdir/$cluster-config kubectl config view --raw=true --merge=true > $tempdir/merged-config
  chmod 600 $tempdir/merged-config
  mv $tempdir/merged-config $HOME/.kube/config

  CONTEXT_WORKLOAD="$cluster-admin@$cluster"
  KUBECTL_WORKLOAD="kubectl --kubeconfig $KUBECONFIG --context $CONTEXT_WORKLOAD"

  set +e
  echo $(date '+%F %H:%M:%S') - Waiting for workload cluster to become responsive
  while [ -z $($KUBECTL_WORKLOAD get pod -n kube-system -l component=kube-apiserver -o name) ]; do sleep 25; done
  set -e

  set +x
  . $REPO_ROOT/config/$cluster.env
  set -x

  # TODO - add wait for namespace instead of this sleep
  sleep 60

  # on clusters that already existed in the git repo before deploying
  # flux is installed by flux instance on a management cluster, but secret for now is installed manually
  # to avoid storing even encrypted secrets in public github repo.
  $KUBECTL_WORKLOAD create secret generic flux-system -n flux-system \
    --from-file identity=$FLUX_KEY_PATH  \
    --from-file identity.pub=$FLUX_KEY_PATH.pub \
    --from-literal known_hosts="$GITHUB_KNOWN_HOSTS"
}

# Discover workload clusters and complete setup if required.
finalize() {
  clusters=$($KUBECTL_MGMT get clusters -A --no-headers=true -o name)
  for line in $clusters; do
    cluster=$(echo $line |  cut -d'/' -f 2)
    if [ "$cluster" != "cluster-mgmt" ]; then
      finalize_cluster $cluster
    fi
  done
}

generate_kustomizations() {
  local flux_kustomization_filepath=$1
  local infra_kustomization_filepath=$2

cat > $flux_kustomization_filepath << EOF
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- gotk-components.yaml
- gotk-sync.yaml
EOF

cat > $infra_kustomization_filepath << EOF
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
- ../base/infrastructure-workload.yaml
- ../base/tenants.yaml
EOF

}

show_help() {
  echo "Deploy a new workload cluster or finalise installation of existing workload clusters"
  echo "All patameters are optional, when run without any args the script will auto-discover"
  echo "workload clusters in the management cluster"
  echo
  echo "Usage:"
  echo
  echo "-k|--management-cluster-kubeconfig - management cluster kubeconfig, default: $HOME/.kube/config"
  echo
  echo "-m|--management-cluster-context - management cluster kubeconfig context, default: 'mgmt'"
  echo
  echo "-g|--generate-only <cluster_name> - config file in $REPO_ROOT/config/<cluster_name>.env must exist"
  echo "  the script will generate all required manifest for the new cluster. It will not be committed to the repo"
  echo "  This option can be used for existing clusters which can be used to upgrade or update manifests"
  echo
  echo "-n|--cluster-name <cluster_name> - same as '-g' but the manifests are committed to the repo."
  echo "  env var GITHUB_BRANCH must be set. Once pushed, the manifests will be synced by flux on the management cluster"
  echo "  The script will wait until cluster is up and running and finalize the installation (cni, and flux secret)"
  exit 0
}

main "$@"
